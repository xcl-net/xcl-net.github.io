<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>同一台机器配置码云和github多账号ssh私钥配置</title>
    <url>/2020/03/09/%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A0%81%E4%BA%91%E5%92%8Cgithub%E5%A4%9A%E8%B4%A6%E5%8F%B7ssh%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>

<h3 id="多账号私钥混肴导致没有权限问题"><a href="#多账号私钥混肴导致没有权限问题" class="headerlink" title="多账号私钥混肴导致没有权限问题"></a>多账号私钥混肴导致没有权限问题</h3><p>github使用SSH与客户端连接。如果是单用户（first），生成密钥对后，将公钥保存至github，每次连接时SSH客户端发送本地私钥（默认~/.ssh/id_rsa）到服务端验证。单用户情况下，连接的服务器上保存的公钥和发送的私钥自然是配对的。但是如果是多用户（first，second），我们在连接到second的帐号时，second保存的是自己的公钥，但是SSH客户端依然发送默认私钥，即first的私钥，那么这个验证自然无法通过。不过，要实现多帐号下的SSH key切换在客户端做一些配置即可。</p>
<p> 首先cd到~/.ssh 使用 ssh-keygen -t -rsa -C ‘<a href="mailto:xxxxx@mail.com">xxxxx@mail.com</a>’ 生成新的SSH key：id_rsa_second，生成完后将新的SSH public key添加到github/码云。 </p>
<p>首先cd到账户根目录下的隐藏文件夹下 .ssh (<em>前提设置为,windows隐藏目录可见</em>):</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<h3 id="生成第一个码云账号公钥并添加到码云ssh绑定页面"><a href="#生成第一个码云账号公钥并添加到码云ssh绑定页面" class="headerlink" title="生成第一个码云账号公钥并添加到码云ssh绑定页面"></a>生成第一个码云账号公钥并添加到码云ssh绑定页面</h3><p>生成第一个码云账号的ssh 私钥</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C '码云绑定的邮箱@<span class="number">163</span>.com' -f ~/.ssh/gitee_177XXXXX_id_rsa</span><br></pre></td></tr></table></figure>

<p>查看第一个码云账号本地生成的公钥串</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/gitee_177XXXXX_id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>公钥添加到码云</p>
<p><img src="/2020/03/09/%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A0%81%E4%BA%91%E5%92%8Cgithub%E5%A4%9A%E8%B4%A6%E5%8F%B7ssh%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE/image-20200309154549069.png" alt="image-20200309154549069"></p>
<h3 id="生成第二个码云账号公钥并添加到码云ssh绑定页面"><a href="#生成第二个码云账号公钥并添加到码云ssh绑定页面" class="headerlink" title="生成第二个码云账号公钥并添加到码云ssh绑定页面"></a>生成第二个码云账号公钥并添加到码云ssh绑定页面</h3><p>生成第二个码云账号的ssh 私钥</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C '码云绑定邮箱@<span class="number">91</span>bihu.com' -f ~/.ssh/gitee_chuanling_id_rsa</span><br></pre></td></tr></table></figure>

<p>查看第二个码云账号本地生成的公钥串</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/gitee_chuanling_id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>公钥添加到码云, 同上;</p>
<h3 id="生成-github账号公钥并添加到github-ssh绑定页面"><a href="#生成-github账号公钥并添加到github-ssh绑定页面" class="headerlink" title="生成 github账号公钥并添加到github ssh绑定页面"></a>生成 github账号公钥并添加到github ssh绑定页面</h3><p>生成github账号的ssh 私钥</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 'github绑定邮箱@github.com' -f ~/.ssh/github_46XXXX_id_rsa</span><br></pre></td></tr></table></figure>

<p>查看github账号本地生成的公钥串</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/github_46XXXX_id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将查到的公钥添加到github,如下;</p>
<p><img src="/2020/03/09/%E5%90%8C%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A0%81%E4%BA%91%E5%92%8Cgithub%E5%A4%9A%E8%B4%A6%E5%8F%B7ssh%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE/image-20200309173614970.png" alt="image-20200309173614970"></p>
<h3 id="配置SSH-agent"><a href="#配置SSH-agent" class="headerlink" title="配置SSH agent"></a>配置SSH agent</h3><p>默认SSH只会读取id_rsa，所以为了让SSH识别新的私钥，需要将其添加到SSH agent</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-add ～/.ssh/gitee_177XXXXX_id_rsa</span><br></pre></td></tr></table></figure>

<p>第二个码云账号和github账号,同样按照这个配置;</p>
<p>可能出现如下问题</p>
<p> 该命令如果报错：Could not open a connection to your authentication agent.无法连接到ssh agent，可执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-agent bash</span><br></pre></td></tr></table></figure>

<p>命令后再执行ssh-add命令。 </p>
<p> 完成以上步骤后在~/.ssh目录创建config文件，该文件用于配置私钥对应的服务器。内容如下： </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># gitee <span class="number">177</span>XXXXX@<span class="number">163</span>.com account</span><br><span class="line">Host gitee.com-blog</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_177XXXXX_id_rsa</span><br><span class="line"></span><br><span class="line"># gitee chuanling@<span class="number">91</span>bihu.com account</span><br><span class="line">Host gitee.com-chuanling</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_chuanling_id_rsa</span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github.com-xcl-<span class="built_in">net</span></span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_46XXXX_id_rsa</span><br></pre></td></tr></table></figure>

<p> Host 命名可以随意即可，方便自己记忆，后续在添加remote是还需要用到。 </p>
<p>主要修改下 IdentityFile 字段, 将对应的私钥配置正确即可;</p>
<p> 测试是否配置成功： </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com-xcl-<span class="built_in">net</span></span><br><span class="line">Hi (you name)! You’ve successfully authenticated, but GITEE.COM does <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure>

<p> 配置完成后，在连接非默认帐号的github仓库时，远程库的地址要对应地做一些修改，比如现在添加second帐号下的一个仓库test，则需要这样添加： </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git remote add test git@(上面配置的Host):second/test.git #并非原来的git@github.com:second/test.git </span><br><span class="line"></span><br><span class="line">git remote add test git@mi.cn:second/test.git #并非原来的git@gitee.com:second/test.git</span><br></pre></td></tr></table></figure>

<p>这样,多个账号就可以同时使用ssh, 免输入账号密码拉去提交代码了;</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>可能有如下问题, 我没遇到这个;</p>
<p>注意：github根据配置文件的user.email来获取github帐号显示author信息，所以对于多帐号用户一定要记得将user.email改为相应的email(<a href="mailto:second@mail.com">second@mail.com</a>)。</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">遗留问题，每次pull &amp; push 都需要输入yes //已解决，如下</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="function">	Warning: <span class="title">the</span> <span class="title">RSA</span> <span class="title">host</span> <span class="title">key</span> <span class="title">for</span> '<span class="title">git.oschina.net</span>' <span class="title">differs</span> <span class="title">from</span> <span class="title">the</span> <span class="title">key</span> <span class="title">for</span> <span class="title">the</span> <span class="title">IP</span> <span class="title">address</span> '116.211.167.14'</span></span><br><span class="line"><span class="function">	<span class="title">Offending</span> <span class="title">key</span> <span class="title">for</span> <span class="title">IP</span> <span class="title">in</span> /<span class="title">Users</span>/<span class="title">StupidBoy</span>/.<span class="title">ssh</span>/<span class="title">known_hosts</span>:7</span></span><br><span class="line"><span class="function">	<span class="title">Matching</span> <span class="title">host</span> <span class="title">key</span> <span class="title">in</span> /<span class="title">Users</span>/<span class="title">StupidBoy</span>/.<span class="title">ssh</span>/<span class="title">known_hosts</span>:2</span></span><br><span class="line"><span class="function">	<span class="title">Are</span> <span class="title">you</span> <span class="title">sure</span> <span class="title">you</span> <span class="title">want</span> <span class="title">to</span> <span class="title">continue</span> <span class="title">connecting</span> (<span class="title">yes</span>/<span class="title">no</span>)?</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R <span class="number">116</span>.<span class="number">211</span>.<span class="number">167</span>.<span class="number">14</span></span><br></pre></td></tr></table></figure>



<p>参考: <a href="https://blog.csdn.net/u013378029/article/details/88309165" target="_blank" rel="noopener">https://blog.csdn.net/u013378029/article/details/88309165</a> </p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>枚举类扩展方法</title>
    <url>/2020/03/02/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E6%89%A9%E5%B1%95%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><a id="more"></a>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CityEnum</span><br><span class="line">&#123;</span><br><span class="line">    北京,</span><br><span class="line">    上海,</span><br><span class="line">    广州</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="枚举类扩展方法"><a href="#枚举类扩展方法" class="headerlink" title="枚举类扩展方法"></a>枚举类扩展方法</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EnumCityCodeExt</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> Is_BJ_北京(<span class="keyword">this</span> CityEnum enumCityCode) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">return</span> 	(<span class="keyword">int</span>)enumCityCode == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对枚举的一些扩展方法,方便调用方,枚举值的判断, 减少输入</p>
<h2 id="调用方演示"><a href="#调用方演示" class="headerlink" title="调用方演示"></a>调用方演示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var isBJ &#x3D; CityCode.Is_BJ_北京();  &#x2F;&#x2F; 此处直接调用扩展方法即可</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(isBJ); &#x2F;&#x2F;True</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static CityEnum CityCode</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return CityEnum.北京;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>csharp</category>
      </categories>
      <tags>
        <tag>C#编码技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>newtonjson高级特性</title>
    <url>/2020/03/02/newtonjson%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="Enum序列化特殊字符串处理"><a href="#Enum序列化特殊字符串处理" class="headerlink" title="Enum序列化特殊字符串处理"></a>Enum序列化特殊字符串处理</h1><p>枚举值在序列化输出时候, 想要包含不符合C#命名规范, 可以使用json的一些高级特性;</p>
<p>枚举类和枚举字段,  添加 json 特性</p>
<a id="more"></a>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 枚举命名时候不能特殊字符,例如: - . 等等, 但是使用json特性后, 枚举值序列化后, 可以显示为包含不符合c#命名规范的那些字符的字符串;</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 例如枚举中字段为:   北京</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 但是, 描述信息可以为:   北-京</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> 序列化之后为:  &#123;"city":"北--京"&#125;</span></span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  [<span class="meta">JsonConverter(typeof(StringEnumConverter))</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> CityEnum</span><br><span class="line">  &#123;</span><br><span class="line">      [<span class="meta">EnumMember(Value = <span class="meta-string">"北--京"</span>)</span>]</span><br><span class="line">      北京,</span><br><span class="line"></span><br><span class="line">      上海,</span><br><span class="line">      广州</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>调用时候显示如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> &#123; city = CityEnum.北京 &#125;;</span><br><span class="line"><span class="keyword">var</span> json = JsonConvert.SerializeObject(p);</span><br></pre></td></tr></table></figure>

<p>运行结果如下:</p>
<p><img src="/2020/03/02/newtonjson%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20200302132214190.png" alt="image-20200302132214190"></p>
]]></content>
      <categories>
        <category>csharp</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>美女美女图文欣赏</title>
    <url>/2020/02/29/%E5%9B%BE%E6%96%87%E6%AC%A3%E8%B5%8F/</url>
    <content><![CDATA[<h1 id="性感家教美女大图"><a href="#性感家教美女大图" class="headerlink" title="性感家教美女大图"></a>性感家教美女大图</h1><p>高清大图,性感美女家教</p>
<a id="more"></a>
<p><img src="/2020/02/29/%E5%9B%BE%E6%96%87%E6%AC%A3%E8%B5%8F/%E6%B8%85%E7%BA%AF%E6%80%A7%E6%84%9F%E7%9A%84%E5%A7%90%E5%A7%90_07ead933e82a52127fa55f22e15a7e6a.jpg" alt></p>
<hr>
<p><img src="/2020/02/29/%E5%9B%BE%E6%96%87%E6%AC%A3%E8%B5%8F/%E6%B8%85%E7%BA%AF%E6%80%A7%E6%84%9F%E7%9A%84%E5%A7%90%E5%A7%90_df6c98f059e291c331df0091dac10840.jpg" alt></p>
<hr>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"武汉加油!"</span>)</span><br><span class="line">Console.WriteLine(<span class="string">"武汉加油!"</span>)</span><br><span class="line">Console.WriteLine(<span class="string">"武汉加油!"</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2020/02/29/%E5%9B%BE%E6%96%87%E6%AC%A3%E8%B5%8F/%E6%B8%85%E7%BA%AF%E6%80%A7%E6%84%9F%E7%9A%84%E5%A7%90%E5%A7%90_fff98893faaa4ecfc81596d8d43ff526.jpg" alt></p>
]]></content>
  </entry>
  <entry>
    <title>2020走进5G时代</title>
    <url>/2020/02/29/2020%E8%B5%B0%E8%BF%9B5G%E6%97%B6%E4%BB%A3/</url>
    <content><![CDATA[<p>5G的发展也来自于对移动数据日益增长的需求。随着移动互联网的发展，越来越多的设备接入到移动网络中，新的服务和应用层出不穷，全球移动宽带用户在2018年有望达到90亿，到2020年，预计移动通信网络的容量需要在当前的网络容量上增长1000倍。移动数据流量的暴涨将给网络带来严峻的挑战。首先，如果按照当前移动通信网络发展，容量难以支持千倍流量的增长，网络能耗和比特成本难以承受；其次，流量增长必然带来对频谱的进一步需求，而移动通信频谱稀缺，可用频谱呈大跨度、碎片化分布，难以实现频谱的高效使用；此外，要提升网络容量，必须智能高效利用网络资源，例如针对业务和用户的个性进行智能优化，但这方面的能力不足；最后，未来网络必然是一个多网并存的异构移动网络，要提升网络容量，必须解决高效管理各个网络，简化互操作，增强用户体验的问题。为了解决上述挑战，满足日益增长的移动流量需求，亟需发展新一代5G移动通信网络。</p>
]]></content>
      <categories>
        <category>5G+</category>
      </categories>
  </entry>
</search>
